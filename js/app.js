// Generated by CoffeeScript 1.8.0
(function() {
  var LatLon, app;

  app = angular.module('app', []);

  app.factory('NED', function($http) {
    return {
      async: function(point) {
        return $http.get("http://ned.usgs.gov/epqs/pqs.php", {
          params: {
            x: point.lon,
            y: point.lat,
            units: "Meters",
            output: "json"
          }
        }).then(function(response) {
          return response.data.USGS_Elevation_Point_Query_Service.Elevation_Query.Elevation;
        });
      }
    };
  });

  Number.prototype.toRad = function() {
    return this * Math.PI / 180;
  };

  Number.prototype.toDeg = function() {
    return this * 180 / Math.PI;
  };

  LatLon = (function() {
    function LatLon(lat, lon, height, radius) {
      this.lat = lat != null ? lat : 0;
      this.lon = lon != null ? lon : 0;
      this.height = height != null ? height : 0;
      this.radius = radius != null ? radius : 6371;
    }

    LatLon.prototype.destinationPoint = function(bearing, distance) {
      var b, d, lat1, lat2, lon1, lon2;
      d = distance / this.radius;
      b = bearing.toRad();
      lat1 = this.lat.toRad();
      lon1 = this.lon.toRad();
      lat2 = Math.asin(Math.sin(lat1) * Math.cos(d) + Math.cos(lat1) * Math.sin(d) * Math.cos(b));
      lon2 = lon1 + Math.atan2(Math.sin(b) * Math.sin(d) * Math.cos(lat1), Math.cos(d) - Math.sin(lat1) * Math.sin(lat2));
      if (isNaN(lat2) || isNaN(lon2)) {
        return null;
      } else {
        return new LatLon(lat2.toDeg(), lon2.toDeg());
      }
    };

    return LatLon;

  })();

  app.controller('MainCtrl', function(NED, $scope) {
    $scope.lat = 42;
    $scope.lon = -88;
    $scope.distance = 0.1;
    return $scope.getRelativeElevation = function() {
      var getElevation, totalPoints, updateRelativeElevation;
      totalPoints = 8;
      $scope.point = new LatLon(Number($scope.lat), Number($scope.lon));
      $scope.points = _.range(totalPoints).map(function(t) {
        return $scope.point.destinationPoint(t * 360 / totalPoints, $scope.distance);
      });
      updateRelativeElevation = function() {
        var averageElevation;
        averageElevation = _.reduce($scope.points, (function(memo, num) {
          return memo + num.height;
        }), 0) / totalPoints;
        return $scope.relativeElevation = $scope.point.height - averageElevation;
      };
      getElevation = function(p) {
        return NED.async(p).then(function(e) {
          p.height = e;
          return updateRelativeElevation();
        });
      };
      getElevation($scope.point);
      return _.each($scope.points, getElevation);
    };
  });

}).call(this);

//# sourceMappingURL=app.js.map
